name: Release
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history and tags
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true  # Get submodules if any
          persist-credentials: false
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install -r requirements_dev.txt
          pip install -r requirements.txt

      - name: Check Git Files
        run: ls -la .git

      - name: Run tests
        run: pytest

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Create Release & Publish to PyPI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Install tools
          pip install bump2version build twine
          
          # 1. Bump version
          case "${{ github.event.inputs.release_type }}" in
            "major")
              bump2version major
              ;;
            "minor")
              bump2version minor
              ;;
            *)
              bump2version patch
              ;;
          esac
          
          # 2. Build package
          python -m build
          
          # 3. Create GitHub Release
          VERSION=$(grep "__version__" growthbook/__init__.py | cut -d'"' -f2)
          git push && git push --tags
          gh release create "v${VERSION}" \
            --title "v${VERSION}" \
            --notes "Release v${VERSION}" \
            dist/*
          
          # 4. Publish to PyPI
          twine upload dist/*