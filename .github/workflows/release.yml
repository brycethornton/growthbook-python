name: Release
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history and tags
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true  # Get submodules if any
          persist-credentials: false
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools
          pip install -r requirements_dev.txt
          pip install -r requirements.txt
          pip install "python-semantic-release==7.33.5" build twine
          semantic-release --version  # Check version

      - name: Check Git Files
        run: ls -la .git

      - name: Run tests
        run: pytest

      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Create Release & Publish to PyPI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          DEBUG: "true"
        run: |
          # Check current state
          echo "Current version in __init__.py:"
          grep "__version__" growthbook/__init__.py
          echo "Current git tags:"
          git tag -l
          
          # Try version bump first
          semantic-release version --patch || echo "Version bump failed with $?"
          
          # Check state after version bump
          echo "Version after bump:"
          grep "__version__" growthbook/__init__.py
          
          # Publish the release
          semantic-release publish -v -D commit_author="github-actions <action@github.com>" || echo "Publish failed with $?"
          
          # Get version for SDK update
          VERSION=$(python setup.py --version)

      - name: Update SDK Versions Repository
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the new version
          VERSION=$(python setup.py --version)
          
          # Checkout the SDK versions repository
          git clone https://github.com/growthbook/growthbook.git
          cd growthbook/packages/shared/src/sdk-versioning/sdk-versions
          
          # Create a new branch
          git checkout -b update-python-sdk-${VERSION}
          
          # Update the JSON file - # ignore capabilities for now[, "capabilities": .[0].capabilities}]
          jq --arg v "$VERSION" \
             '.versions = ([{"version": $v}] + .versions)' \
             python.json > python.json.tmp && mv python.json.tmp python.json
          
          # Commit and push changes
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add python.json
          git commit -m "chore: update Python SDK to ${VERSION}"
          git push origin update-python-sdk-${VERSION}
          
          # Create Pull Request
          gh pr create \
            --title "Update Python SDK to ${VERSION}" \
            --body "Automated PR to update Python SDK version to ${VERSION} in capabilities matrix" \
            --repo growthbook/growthbook \
            --base main